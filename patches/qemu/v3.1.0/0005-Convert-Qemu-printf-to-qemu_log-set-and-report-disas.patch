From 1a7e11ac6bc7124cb594f459583b76877408e37d Mon Sep 17 00:00:00 2001
From: Steffen Schulz <steffen.schulz@intel.com>
Date: Sun, 29 Sep 2019 16:33:37 +0200
Subject: [PATCH] Convert Qemu printf to qemu_log, set and report disasm word
 width

RQ extension needs to know the target word with for online code
disassembly. Instead of assuming 64bit, initialize as invalid and set
a sane default based on submit_CR3 hypercall meta-info. Report word
width as part of Qemu output so users have a chance not notice bad
settings..
---
 include/qemu/log.h |  1 +
 pt.c               | 28 +++++++++++++++-------------
 pt/debug.h         | 30 +++++++++++++++++++-----------
 pt/disassembler.c  |  2 +-
 pt/hypercall.c     | 38 ++++++++++++++++++++++----------------
 util/log.c         |  2 ++
 6 files changed, 60 insertions(+), 41 deletions(-)

diff --git a/include/qemu/log.h b/include/qemu/log.h
index b097a6ca..0efdc23f 100644
--- a/include/qemu/log.h
+++ b/include/qemu/log.h
@@ -45,6 +45,7 @@ static inline bool qemu_log_separate(void)
 /* LOG_TRACE (1 << 15) is defined in log-for-trace.h */
 #define CPU_LOG_TB_OP_IND  (1 << 16)
 #define CPU_LOG_TB_FPU     (1 << 17)
+#define LOG_KAFL           (1 << 18)
 
 /* Lock output for a series of related logs.  Since this is not needed
  * for a single qemu_log / qemu_log_mask / qemu_log_mask_and_addr, we
diff --git a/pt.c b/pt.c
index e0ea384a..f9e81c65 100644
--- a/pt.c
+++ b/pt.c
@@ -56,7 +56,7 @@ void pt_sync(void){
 static inline int pt_cmd_hmp_context(CPUState *cpu, uint64_t cmd){
 	cpu->pt_ret = -1;
 	if(pt_hypercalls_enabled()){
-		QEMU_PT_PRINTF(PT_PREFIX, "Error: HMP commands are ignored if kafl tracing mode is enabled (-kafl)!");
+		QEMU_PT_ERROR(PT_PREFIX, "Error: HMP commands are ignored if kafl tracing mode is enabled (-kafl)!");
 	}
 	else{
 		cpu->pt_cmd = cmd;
@@ -182,7 +182,7 @@ int pt_set_cr3(CPUState *cpu, uint64_t val, bool hmp_mode){
 		return -EINVAL;
 	}
 	if (cpu->pt_c3_filter && cpu->pt_c3_filter != val){
-		//QEMU_PT_PRINTF(PT_PREFIX, "Reconfigure CR3-Filtering!");
+		QEMU_PT_DEBUG(PT_PREFIX, "Reconfigure CR3-Filtering!");
 		cpu->pt_c3_filter = val;
 		r += pt_cmd(cpu, KVM_VMX_PT_CONFIGURE_CR3, hmp_mode);
 		return r;
@@ -210,7 +210,7 @@ int pt_enable_ip_filtering(CPUState *cpu, uint8_t addrn, uint64_t ip_a, uint64_t
 	}
 		
 	if(ip_a > ip_b){
-		QEMU_PT_PRINTF(PT_PREFIX, "Error (ip_a > ip_b) 0x%lx-0x%lx", ip_a, ip_b);
+		QEMU_PT_ERROR(PT_PREFIX, "Error (ip_a > ip_b) 0x%lx-0x%lx", ip_a, ip_b);
 		return -EINVAL;
 	}
 
@@ -218,9 +218,9 @@ int pt_enable_ip_filtering(CPUState *cpu, uint8_t addrn, uint64_t ip_a, uint64_t
 		pt_disable_ip_filtering(cpu, addrn, hmp_mode);
 	}
 
-	buf = malloc(ip_b-ip_a);
+	buf = malloc(ip_b-ip_a); // TODO memory leak?
 	if(!read_virtual_memory(ip_a, buf, ip_b-ip_a, cpu)){
-		QEMU_PT_PRINTF(PT_PREFIX, "Error (cannot dump trace region) 0x%lx-0x%lx (size: %lx)", ip_a, ip_b, (ip_b-ip_a));
+		QEMU_PT_ERROR(PT_PREFIX, "Error (cannot dump trace region) 0x%lx-0x%lx (size: %lx)", ip_a, ip_b, (ip_b-ip_a));
 		free(buf);
 		return -EINVAL;
 	}
@@ -237,7 +237,7 @@ int pt_enable_ip_filtering(CPUState *cpu, uint8_t addrn, uint64_t ip_a, uint64_t
 #endif
 
 
-	QEMU_PT_PRINTF(PT_PREFIX, "Configuring new trace region (addr%d, 0x%lx-0x%lx)", addrn, ip_a, ip_b);
+	QEMU_PT_DEBUG(PT_PREFIX, "Configuring new trace region (addr%d, 0x%lx-0x%lx)", addrn, ip_a, ip_b);
 	
 	switch(addrn){
 		case 0:
@@ -313,7 +313,9 @@ void pt_kvm_init(CPUState *cpu){
 
 	cpu->patches_enable_pending = false;//TODO don't enable this
 	cpu->patches_disable_pending = false;
-	cpu->disassembler_word_width = 64;
+   	// setting the target's word with is critical to RQ operation
+	// Initialize as invalid, set by submit_CR3 or submit_mode hypercalls
+	cpu->disassembler_word_width = 0;
 
 	cpu->pt_c3_filter = 0;
 	cpu->pt_target_file = NULL;
@@ -338,14 +340,14 @@ void pt_pre_kvm_run(CPUState *cpu){
 #ifdef CONFIG_REDQUEEN
 
 	if(cpu->patches_disable_pending){
-		//QEMU_PT_PRINTF(REDQUEEN_PREFIX, "patches disable");
+		QEMU_PT_DEBUG(REDQUEEN_PREFIX, "patches disable");
 		patcher_t* patcher = qemu_get_cpu(0)->redqueen_patch_state;
 		pt_disable_patches(patcher);
 		cpu->patches_disable_pending = false;
 	}
 
 	if(cpu->patches_enable_pending){
-		//QEMU_PT_PRINTF(REDQUEEN_PREFIX, "patches enable");
+		QEMU_PT_DEBUG(REDQUEEN_PREFIX, "patches enable");
 		patcher_t* patcher = qemu_get_cpu(0)->redqueen_patch_state;
 		pt_enable_patches(patcher);
 		cpu->patches_enable_pending = false;
@@ -353,7 +355,7 @@ void pt_pre_kvm_run(CPUState *cpu){
 
 
 	if(cpu->redqueen_enable_pending){
-		//QEMU_PT_PRINTF(REDQUEEN_PREFIX, "rq enable");
+		QEMU_PT_DEBUG(REDQUEEN_PREFIX, "rq enable");
 		for(uint8_t i = 0; i < INTEL_PT_MAX_RANGES; i++){
 			if (cpu->redqueen_state[i]){
 				enable_rq_intercept_mode(cpu->redqueen_state[i]);
@@ -364,7 +366,7 @@ void pt_pre_kvm_run(CPUState *cpu){
 	}
 
 	if(cpu->redqueen_disable_pending){
-		//QEMU_PT_PRINTF(REDQUEEN_PREFIX, "rq disable");
+		QEMU_PT_DEBUG(REDQUEEN_PREFIX, "rq disable");
 		for(uint8_t i = 0; i < INTEL_PT_MAX_RANGES; i++){
 			if (cpu->redqueen_state[i]){
 				disable_rq_intercept_mode(cpu->redqueen_state[i]);
@@ -377,7 +379,7 @@ void pt_pre_kvm_run(CPUState *cpu){
 	if (!cpu->pt_fd) {
 		cpu->pt_fd = kvm_vcpu_ioctl(cpu, KVM_VMX_PT_SETUP_FD, (unsigned long)0);
 		ret = ioctl(cpu->pt_fd, KVM_VMX_PT_GET_TOPA_SIZE, (unsigned long)0x0);
-		//printf("TOPA SIZE: %lx\n", ret);
+		QEMU_PT_DEBUG(PT_PREFIX, "TOPA SIZE: %x\n", ret);
 		cpu->pt_mmap = mmap(0, ret, PROT_READ, MAP_SHARED, cpu->pt_fd, 0);
 	}
 	
@@ -397,7 +399,7 @@ void pt_pre_kvm_run(CPUState *cpu){
 				if (cpu->pt_fd){
 					ret = ioctl(cpu->pt_fd, cpu->pt_cmd, cpu->pt_arg);
 					if (ret > 0){
-						//QEMU_PT_PRINTF(PT_PREFIX, "KVM_VMX_PT_DISABLE %d", ret);
+						QEMU_PT_DEBUG(PT_PREFIX, "KVM_VMX_PT_DISABLE %d", ret);
 						pt_dump(cpu, ret);
 						cpu->pt_enabled = false;
 					}
diff --git a/pt/debug.h b/pt/debug.h
index b4ff28c4..dff793ac 100644
--- a/pt/debug.h
+++ b/pt/debug.h
@@ -22,18 +22,26 @@ along with Redqueen.  If not, see <http://www.gnu.org/licenses/>.
 
 #pragma once
 
-#define QEMU_PT_PRINT_PREFIX  "[QEMU-PT]\t"
-#define CORE_PREFIX           "Core:      "
-#define MEM_PREFIX            "Memory:    "
-#define RELOAD_PREFIX         "Reload:    "
-#define PT_PREFIX             "PT:        "
-#define INTERFACE_PREFIX      "Interface: "
-#define REDQUEEN_PREFIX       "Redqueen:  "
-#define DISASM_PREFIX         "Disasm:    "
+#include "qemu/osdep.h"
+#include "qemu-common.h"
+#include "qemu/log.h"
+
+#define QEMU_PT_PREFIX		"[QEMU-PT] "
+#define CORE_PREFIX			"Core:  "
+#define MEM_PREFIX			"Mem:   "
+#define RELOAD_PREFIX		"Reload:"
+#define PT_PREFIX			"PT:    "
+#define INTERFACE_PREFIX	"Iface: "
+#define REDQUEEN_PREFIX		"Redq.: "
+#define DISASM_PREFIX		"Diasm: "
 
 #define COLOR	"\033[1;35m"
 #define ENDC	"\033[0m"
 
-
-#define QEMU_PT_PRINTF(PREFIX, format, ...) printf (QEMU_PT_PRINT_PREFIX COLOR PREFIX format ENDC "\n", ##__VA_ARGS__)
-#define QEMU_PT_PRINTF_DBG(PREFIX, format, ...) printf (QEMU_PT_PRINT_PREFIX PREFIX "(%s#:%d)\t"format, __BASE_FILE__, __LINE__, ##__VA_ARGS__)
+/* _PRINTF is the standard logging enabled with -D */
+/* _DEBUG is activated with -t kafl cmdline */
+/* _ERROR is printed to stdout (or logged if logging is enabled) */
+#define QEMU_PT_PRINTF(PREFIX, format, ...) qemu_log(QEMU_PT_PREFIX PREFIX format "\n", ##__VA_ARGS__)
+#define QEMU_PT_DEBUG(PREFIX, format, ...)  qemu_log_mask(LOG_KAFL, QEMU_PT_PREFIX PREFIX format "\n", ##__VA_ARGS__)
+//#define QEMU_PT_DEBUG(PREFIX, format, ...) qemu_log_mask(LOG_KAFL, PREFIX "(%s#:%d)\t"format, __BASE_FILE__, __LINE__, ##__VA_ARGS__)
+#define QEMU_PT_ERROR(PREFIX, format, ...)  printf(QEMU_PT_PREFIX PREFIX format "\n", ##__VA_ARGS__)
diff --git a/pt/disassembler.c b/pt/disassembler.c
index e4f6faef..d16d6f50 100644
--- a/pt/disassembler.c
+++ b/pt/disassembler.c
@@ -362,7 +362,7 @@ static cofi_type opcode_analyzer(disassembler_t* self, cs_insn *ins){
 			  set_se_instruction(self->redqueen_state, ins->address);
 		  }
       if(ins->id ==X86_INS_CALL || ins->id == X86_INS_LCALL){
-		//QEMU_PT_PRINTF(REDQUEEN_PREFIX, "insert hook call %lx", ins->address);
+		  QEMU_PT_DEBUG(REDQUEEN_PREFIX, "insert hook call %lx", ins->address);
 		  set_rq_instruction(self->redqueen_state, ins->address);
       }
 	}
diff --git a/pt/hypercall.c b/pt/hypercall.c
index ebc3f872..da88101c 100644
--- a/pt/hypercall.c
+++ b/pt/hypercall.c
@@ -280,7 +280,7 @@ void handle_hypercall_kafl_acquire(struct kvm_run *run, CPUState *cpu){
 void handle_hypercall_get_payload(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
 		if(payload_buffer){
-			QEMU_PT_PRINTF(CORE_PREFIX, "Payload Address:\t%lx", (uint64_t)run->hypercall.args[0]);
+			QEMU_PT_PRINTF(CORE_PREFIX, "Payload Address:\t%llx", run->hypercall.args[0]);
 			payload_buffer_guest = (void*)run->hypercall.args[0];
 			write_virtual_memory((uint64_t)payload_buffer_guest, payload_buffer, PAYLOAD_SIZE, cpu);
 		}
@@ -290,7 +290,7 @@ void handle_hypercall_get_payload(struct kvm_run *run, CPUState *cpu){
 void handle_hypercall_get_program(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
 		if(program_buffer){
-			QEMU_PT_PRINTF(CORE_PREFIX, "Program Address:\t%lx", (uint64_t)run->hypercall.args[0]);
+			QEMU_PT_PRINTF(CORE_PREFIX, "Program Address:\t%llx", run->hypercall.args[0]);
 			write_virtual_memory((uint64_t)run->hypercall.args[0], program_buffer, PROGRAM_SIZE, cpu);
 		}
 	}
@@ -312,8 +312,18 @@ void handle_hypercall_kafl_release(struct kvm_run *run, CPUState *cpu){
 
 void handle_hypercall_kafl_cr3(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
-		//QEMU_PT_PRINTF(CORE_PREFIX, "CR3 address:\t\t%lx", (uint64_t)run->hypercall.args[0]);
+		QEMU_PT_PRINTF(CORE_PREFIX, "CR3 address:\t\t%llx", run->hypercall.args[0]);
 		pt_set_cr3(cpu, run->hypercall.args[0], false);
+
+		if (cpu->disassembler_word_width == 0) {
+			if (run->hypercall.longmode) {
+				QEMU_PT_PRINTF(CORE_PREFIX, "Setting arch=64 (longmode=%d)\n", run->hypercall.longmode);
+				cpu->disassembler_word_width = 64;
+			} else {
+				QEMU_PT_PRINTF(CORE_PREFIX, "Setting arch=32 (longmode=%d)\n", run->hypercall.longmode);
+				cpu->disassembler_word_width = 32;
+			}
+		}
 	}
 }
 
@@ -345,13 +355,11 @@ void handle_hypercall_kafl_submit_kasan(struct kvm_run *run, CPUState *cpu){
 
 void handle_hypercall_kafl_panic(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
-#ifdef PANIC_DEBUG
-		if(cpu, run->hypercall.args[0]){
-			QEMU_PT_PRINTF(CORE_PREFIX, "Panic in user mode!");
+		if(run->hypercall.args[0]){
+			QEMU_PT_DEBUG(CORE_PREFIX, "Panic in user mode!");
 		} else{
-			QEMU_PT_PRINTF(CORE_PREFIX, "Panic in kernel mode!");
+			QEMU_PT_DEBUG(CORE_PREFIX, "Panic in kernel mode!");
 		}
-#endif
     QEMU_PT_PRINTF(CORE_PREFIX, "Panic detected during initialization of stage 1 or stage 2 loader");
     hypercall_snd_char(KAFL_PROTO_CRASH);
 	}
@@ -366,13 +374,11 @@ void handle_hypercall_kafl_timeout(struct kvm_run *run, CPUState *cpu){
 
 void handle_hypercall_kafl_kasan(struct kvm_run *run, CPUState *cpu){
 	if(hypercall_enabled){
-#ifdef PANIC_DEBUG
-		if(cpu, run->hypercall.args[0]){
-			QEMU_PT_PRINTF(CORE_PREFIX, "ASan notification in user mode!");
+		if(run->hypercall.args[0]){
+			QEMU_PT_DEBUG(CORE_PREFIX, "ASan notification in user mode!");
 		} else{
-			QEMU_PT_PRINTF(CORE_PREFIX, "ASan notification in kernel mode!");
+			QEMU_PT_DEBUG(CORE_PREFIX, "ASan notification in kernel mode!");
 		}
-#endif
     QEMU_PT_PRINTF(CORE_PREFIX, "KASAN detected during initialization of stage 1 or stage 2 loader");
     hypercall_snd_char(KAFL_PROTO_KASAN);
 	}
@@ -389,7 +395,7 @@ void handle_hypercall_kafl_lock(struct kvm_run *run, CPUState *cpu){
             error_reportf_err(err, "Error: ");
 
 		qemu_mutex_unlock_iothread();
-		QEMU_PT_PRINTF(CORE_PREFIX, "Done...");
+		QEMU_PT_PRINTF(CORE_PREFIX, "Done. Shutting down..");
 		qemu_system_shutdown_request(SHUTDOWN_CAUSE_HOST_SIGNAL);
 	}
 }
@@ -406,7 +412,7 @@ void handle_hypercall_kafl_info(struct kvm_run *run, CPUState *cpu){
 }
 
 void enable_hprintf(void){
-	QEMU_PT_PRINTF(CORE_PREFIX, "Enable hprintf support");
+	QEMU_PT_DEBUG(CORE_PREFIX, "Enable hprintf support");
 	hprintf_enabled = true;
 }
 
@@ -490,7 +496,7 @@ void handle_hypercall_kafl_user_submit_mode(struct kvm_run *run, CPUState *cpu){
 			cpu->disassembler_word_width = 16;
 			break;
 		default:
-			QEMU_PT_PRINTF(CORE_PREFIX, "target runs in unkown mode...");
+			QEMU_PT_ERROR(CORE_PREFIX, "Error: target uses unknown word width..");
 			cpu->disassembler_word_width = -1;
 			break;
 	}
diff --git a/util/log.c b/util/log.c
index c0dbbd47..50d4ef74 100644
--- a/util/log.c
+++ b/util/log.c
@@ -274,6 +274,8 @@ const QEMULogItem qemu_log_items[] = {
     { CPU_LOG_TB_NOCHAIN, "nochain",
       "do not chain compiled TBs so that \"exec\" and \"cpu\" show\n"
       "complete traces" },
+    { LOG_KAFL, "kafl",
+      "trace kAFL/Redqueen execution" },
     { 0, NULL, NULL },
 };
 
-- 
2.20.1

