42,51c42,73
< /* data port used by Apple SMC */
< #define APPLESMC_DATA_PORT             0x0
< /* command/status port used by Apple SMC */
< #define APPLESMC_CMD_PORT              0x4
< #define APPLESMC_NR_PORTS              32
< 
< #define APPLESMC_READ_CMD              0x10
< #define APPLESMC_WRITE_CMD             0x11
< #define APPLESMC_GET_KEY_BY_INDEX_CMD  0x12
< #define APPLESMC_GET_KEY_TYPE_CMD      0x13
---
> 
> enum {
>     APPLESMC_DATA_PORT               = 0x00,
>     APPLESMC_CMD_PORT                = 0x04,
>     APPLESMC_ERR_PORT                = 0x1e,
>     APPLESMC_NUM_PORTS               = 0x20,
> };
> 
> enum {
>     APPLESMC_READ_CMD                = 0x10,
>     APPLESMC_WRITE_CMD               = 0x11,
>     APPLESMC_GET_KEY_BY_INDEX_CMD    = 0x12,
>     APPLESMC_GET_KEY_TYPE_CMD        = 0x13,
> };
> 
> enum {
>     APPLESMC_ST_CMD_DONE             = 0x00,
>     APPLESMC_ST_DATA_READY           = 0x01,
>     APPLESMC_ST_BUSY                 = 0x02,
>     APPLESMC_ST_ACK                  = 0x04,
>     APPLESMC_ST_NEW_CMD              = 0x08,
> };
> 
> enum {
>     APPLESMC_ST_1E_CMD_INTRUPTED     = 0x80,
>     APPLESMC_ST_1E_STILL_BAD_CMD     = 0x81,
>     APPLESMC_ST_1E_BAD_CMD           = 0x82,
>     APPLESMC_ST_1E_NOEXIST           = 0x84,
>     APPLESMC_ST_1E_WRITEONLY         = 0x85,
>     APPLESMC_ST_1E_READONLY          = 0x86,
>     APPLESMC_ST_1E_BAD_INDEX         = 0xb8,
> };
56c78
< #define smc_debug(...) do { } while(0)
---
> #define smc_debug(...) do { } while (0)
59c81
< static char default_osk[64] = "This is a dummy key. Enter the real key "
---
> static char default_osk[65] = "This is a dummy key. Enter the real key "
75,76c97
<     MemoryRegion io_data;
<     MemoryRegion io_cmd;
---
>     MemoryRegion io_reg;
80c101,103
<     uint8_t key[4];
---
>     uint8_t status_1e;
>     uint8_t last_ret;
>     char key[4];
85d107
<     uint8_t charactic[4];
93a116
>     uint8_t status = s->status & 0x0f;
95,99c118,134
<     smc_debug("CMD Write B: %#x = %#x\n", addr, val);
<     switch(val) {
<         case APPLESMC_READ_CMD:
<             s->status = 0x0c;
<             break;
---
>     smc_debug("CMD received: 0x%02x\n", (uint8_t)val);
>     switch (val) {
>     case APPLESMC_READ_CMD:
>         /* did last command run through OK? */
>         if (status == APPLESMC_ST_CMD_DONE || status == APPLESMC_ST_NEW_CMD) {
>             s->cmd = val;
>             s->status = APPLESMC_ST_NEW_CMD | APPLESMC_ST_ACK;
>         } else {
>             smc_debug("ERROR: previous command interrupted!\n");
>             s->status = APPLESMC_ST_NEW_CMD;
>             s->status_1e = APPLESMC_ST_1E_CMD_INTRUPTED;
>         }
>         break;
>     default:
>         smc_debug("UNEXPECTED CMD 0x%02x\n", (uint8_t)val);
>         s->status = APPLESMC_ST_NEW_CMD;
>         s->status_1e = APPLESMC_ST_1E_BAD_CMD;
101d135
<     s->cmd = val;
106c140
< static void applesmc_fill_data(AppleSMCState *s)
---
> static struct AppleSMCData *applesmc_find_key(AppleSMCState *s, const char *key)
111,115c145,146
<         if (!memcmp(d->key, s->key, 4)) {
<             smc_debug("Key matched (%s Len=%d Data=%s)\n", d->key,
<                       d->len, d->data);
<             memcpy(s->data, d->data, d->len);
<             return;
---
>         if (!memcmp(d->key, key, 4)) {
>             return d;
117a149
>     return NULL;
123a156
>     struct AppleSMCData *d;
125,133c158,171
<     smc_debug("DATA Write B: %#x = %#x\n", addr, val);
<     switch(s->cmd) {
<         case APPLESMC_READ_CMD:
<             if(s->read_pos < 4) {
<                 s->key[s->read_pos] = val;
<                 s->status = 0x04;
<             } else if(s->read_pos == 4) {
<                 s->data_len = val;
<                 s->status = 0x05;
---
>     smc_debug("DATA received: 0x%02x\n", (uint8_t)val);
>     switch (s->cmd) {
>     case APPLESMC_READ_CMD:
>         if ((s->status & 0x0f) == APPLESMC_ST_CMD_DONE) {
>             break;
>         }
>         if (s->read_pos < 4) {
>             s->key[s->read_pos] = val;
>             s->status = APPLESMC_ST_ACK;
>         } else if (s->read_pos == 4) {
>             d = applesmc_find_key(s, s->key);
>             if (d != NULL) {
>                 memcpy(s->data, d->data, d->len);
>                 s->data_len = d->len;
135,137c173,179
<                 smc_debug("Key = %c%c%c%c Len = %d\n", s->key[0],
<                           s->key[1], s->key[2], s->key[3], val);
<                 applesmc_fill_data(s);
---
>                 s->status = APPLESMC_ST_ACK | APPLESMC_ST_DATA_READY;
>                 s->status_1e = APPLESMC_ST_CMD_DONE;  /* clear on valid key */
>             } else {
>                 smc_debug("READ_CMD: key '%c%c%c%c' not found!\n",
>                           s->key[0], s->key[1], s->key[2], s->key[3]);
>                 s->status = APPLESMC_ST_CMD_DONE;
>                 s->status_1e = APPLESMC_ST_1E_NOEXIST;
139,140c181,186
<             s->read_pos++;
<             break;
---
>         }
>         s->read_pos++;
>         break;
>     default:
>         s->status = APPLESMC_ST_CMD_DONE;
>         s->status_1e = APPLESMC_ST_1E_STILL_BAD_CMD;
144,145c190
< static uint64_t applesmc_io_data_read(void *opaque, hwaddr addr1,
<                                       unsigned size)
---
> static uint64_t applesmc_io_data_read(void *opaque, hwaddr addr, unsigned size)
148d192
<     uint8_t retval = 0;
150,161c194,211
<     switch(s->cmd) {
<         case APPLESMC_READ_CMD:
<             if(s->data_pos < s->data_len) {
<                 retval = s->data[s->data_pos];
<                 smc_debug("READ_DATA[%d] = %#hhx\n", s->data_pos,
<                           retval);
<                 s->data_pos++;
<                 if(s->data_pos == s->data_len) {
<                     s->status = 0x00;
<                     smc_debug("EOF\n");
<                 } else
<                     s->status = 0x05;
---
>     switch (s->cmd) {
>     case APPLESMC_READ_CMD:
>         if (!(s->status & APPLESMC_ST_DATA_READY)) {
>             break;
>         }
>         if (s->data_pos < s->data_len) {
>             s->last_ret = s->data[s->data_pos];
>             smc_debug("READ '%c%c%c%c'[%d] = %0x%02x\n",
>                       s->key[0], s->key[1], s->key[2], s->key[3],
>                       s->data_pos, s->last_ret);
>             s->data_pos++;
>             if (s->data_pos == s->data_len) {
>                 s->status = APPLESMC_ST_CMD_DONE;
>                 smc_debug("READ '%c%c%c%c' Len=%d complete!\n",
>                           s->key[0], s->key[1], s->key[2], s->key[3],
>                           s->data_len);
>             } else {
>                 s->status = APPLESMC_ST_ACK | APPLESMC_ST_DATA_READY;
162a213,217
>         }
>         break;
>     default:
>         s->status = APPLESMC_ST_CMD_DONE;
>         s->status_1e = APPLESMC_ST_1E_STILL_BAD_CMD;
164c219
<     smc_debug("DATA Read b: %#x = %#x\n", addr1, retval);
---
>     smc_debug("DATA sent: 0x%02x\n", s->last_ret);
166c221
<     return retval;
---
>     return s->last_ret;
169c224
< static uint64_t applesmc_io_cmd_read(void *opaque, hwaddr addr1, unsigned size)
---
> static uint64_t applesmc_io_cmd_read(void *opaque, hwaddr addr, unsigned size)
173c228
<     smc_debug("CMD Read B: %#x\n", addr1);
---
>     smc_debug("CMD Read B: %#x\n", addr);
176a232,240
> static uint64_t applesmc_io_err_read(void *opaque, hwaddr addr, unsigned size)
> {
>     AppleSMCState *s = opaque;
> 
>     /* NOTE: read does not clear the 1e status */
>     smc_debug("ERR_CODE sent: 0x%02x\n", s->status_1e);
>     return s->status_1e;
> }
> 
198a263,265
>     s->status = 0x00;
>     s->status_1e = 0x00;
>     s->last_ret = 0x00;
208,216c275,302
< static const MemoryRegionOps applesmc_data_io_ops = {
<     .write = applesmc_io_data_write,
<     .read = applesmc_io_data_read,
<     .endianness = DEVICE_NATIVE_ENDIAN,
<     .impl = {
<         .min_access_size = 1,
<         .max_access_size = 1,
<     },
< };
---
> static void applesmc_io_write(void *opaque, hwaddr addr, uint64_t val,
>                               unsigned size)
> {
>     switch (addr) {
>     case APPLESMC_DATA_PORT:
>         applesmc_io_data_write(opaque, addr, val, size);
>         break;
>     case APPLESMC_CMD_PORT:
>         applesmc_io_cmd_write(opaque, addr, val, size);
>         break;
>     default:
>         break;
>     }
> }
> 
> static uint64_t applesmc_io_read(void *opaque, hwaddr addr, unsigned size)
> {
>     switch (addr) {
>     case APPLESMC_DATA_PORT:
>         return applesmc_io_data_read(opaque, addr, size);
>     case APPLESMC_CMD_PORT:
>         return applesmc_io_cmd_read(opaque, addr, size);
>     case APPLESMC_ERR_PORT:
>         return applesmc_io_err_read(opaque, addr, size);
>     default:
>         return 0xff;
>     }
> }
218,220c304,306
< static const MemoryRegionOps applesmc_cmd_io_ops = {
<     .write = applesmc_io_cmd_write,
<     .read = applesmc_io_cmd_read,
---
> static const MemoryRegionOps applesmc_io_ops = {
>     .write = applesmc_io_write,
>     .read = applesmc_io_read,
232,240c318,320
<     memory_region_init_io(&s->io_data, OBJECT(s), &applesmc_data_io_ops, s,
<                           "applesmc-data", 4);
<     isa_register_ioport(&s->parent_obj, &s->io_data,
<                         s->iobase + APPLESMC_DATA_PORT);
< 
<     memory_region_init_io(&s->io_cmd, OBJECT(s), &applesmc_cmd_io_ops, s,
<                           "applesmc-cmd", 4);
<     isa_register_ioport(&s->parent_obj, &s->io_cmd,
<                         s->iobase + APPLESMC_CMD_PORT);
---
>     memory_region_init_io(&s->io_reg, OBJECT(s), &applesmc_io_ops, s,
>                           "applesmc", APPLESMC_NUM_PORTS);
>     isa_register_ioport(&s->parent_obj, &s->io_reg, s->iobase);
